#풀이_1번

class Solution:
    def longestPalindrome(self, s: str) -> str:
        m = ''  # Memory to remember a palindrome
        for i in range(len(s)):  # i = start, O = n
            for j in range(len(s), i, -1):  # j = end, O = n^2
                if len(m) >= j-i:  # To reduce time
                    break
                elif s[i:j] == s[i:j][::-1]:
                    m = s[i:j]
                    break
        return m

#풀이_2번

class Solution:
    def longestPalindrome(self, s: str) -> str:
        len_s = len(s)
        result = []
        if len_s == 1:
            return s
        for i in range(len_s - 1):
            tmp = 0
            for y in range(i + 1, len_s):
                cnt = 0
                x = i
                while x <= y:
                    if s[x] != s[y]:
                        cnt = 1
                        y = y - 1
                        break
                    elif x == y:
                        cnt = cnt + 1
                        x = x + 1
                        y = y - 1
                    else:
                        cnt = cnt + 2
                        x = x + 1
                        y = y - 1
                tmp = max(tmp, cnt)
            result.append(tmp)
        print(result)
        t = result.index(max(result))
        return s[t:t+result[t]]
